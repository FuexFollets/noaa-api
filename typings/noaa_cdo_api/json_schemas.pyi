"""
This type stub file was generated by pyright.
"""

from typing import NotRequired, TypedDict

"""
JSON Schema Definitions for NOAA API Responses
==============================================

This module defines `TypedDict` structures that represent the JSON responses from the NOAA NCEI API v2. The schemas ensure type safety and provide clear documentation on the expected structure of API responses.

Each class corresponds to a specific API endpoint, describing the structure of the JSON data returned by that endpoint.

Motivations:
-----------
1. **Type Safety**:
   - Prevents runtime errors by catching type mismatches during development
   - Enables IDE autocompletion and inline documentation
   - Makes refactoring safer by identifying all affected code paths

2. **Documentation as Code**:
   - Schema definitions serve as both runtime type checking and API documentation
   - Field descriptions are always in sync with the actual implementation
   - New developers can understand the API structure by reading the type definitions

3. **Error Prevention**:
   - Catches common issues like missing required fields
   - Validates data types before processing (e.g., numeric vs string fields)
   - Helps prevent data processing errors due to unexpected field formats

4. **API Evolution**:
   - Tracks API changes through type definitions
   - Makes breaking changes obvious through type checking
   - Facilitates versioning and backward compatibility

Implementation Notes:
-------------------
1. **Field Types**:
   - Date fields use string type with format annotations (e.g., 'YYYY-MM-DD')
   - Numeric fields accept both float and int for maximum compatibility
   - Optional fields are marked with `NotRequired` to handle varying responses

2. **Response Structure**:
   - All list endpoints include `metadata` with pagination info
   - Single-item endpoints (e.g., `/datasets/{id}`) return direct objects
   - Rate limit responses have a distinct schema for error handling

3. **Data Handling**:
   - Some numeric fields (e.g., 'datacoverage') may be returned as strings
   - Geographic coordinates are always numeric (float or int)
   - Empty or null values should be handled appropriately in client code

4. **Best Practices**:
   - Always validate response structure against these schemas
   - Handle optional fields defensively
   - Consider caching metadata responses
   - Check for rate limit responses before processing data

Schemas:
--------
 - `ResultSetJSON`: Metadata about pagination (offset, count, limit).
 - `MetadataJSON`: Encapsulates `ResultSetJSON`, included in most responses.
 - `RateLimitJSON`: Response for rate-limiting errors.
 - `DatasetIDJSON`: Response schema for `/datasets/{id}`.
 - `DatasetsJSON`: Response schema for `/datasets`.
 - `DatacategoryIDJSON`: Response schema for `/datacategories/{id}`.
 - `DatacategoriesJSON`: Response schema for `/datacategories`.
 - `DatatypeIDJSON`: Response schema for `/datatypes/{id}`.
 - `DatatypesJSON`: Response schema for `/datatypes`.
 - `LocationcategoryIDJSON`: Response schema for `/locationcategories/{id}`.
 - `LocationcategoriesJSON`: Response schema for `/locationcategories`.
 - `LocationIDJSON`: Response schema for `/locations/{id}`.
 - `LocationsJSON`: Response schema for `/locations`.
 - `StationIDJSON`: Response schema for `/stations/{id}`.
 - `StationsJSON`: Response schema for `/stations`.
 - `DatapointJSON`: Individual data point response from `data?datasetid=...`.
 - `DataJSON`: Response schema for `data?datasetid=...`.

Notes:
------
 - Some fields, such as dates, follow a specific format (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM:SS`).
 - Certain fields are `NotRequired`, meaning they may not appear in all responses.
 - Data coverage fields (`datacoverage`) are expressed as a float or integer.
 - Geographic coordinates (latitude, longitude) are always numeric but may be integer or float.
 - Station elevation values include both the numeric value and unit of measurement.
 - Data point values may include quality flags in the optional attributes field.

These schemas facilitate type checking and autocompletion in IDEs while working with the NOAA API responses.
"""
class ResultSetJSON(TypedDict):
    """
    Represents metadata about the result set, including pagination details.
    """
    offset: int
    count: int
    limit: int
    ...


class MetadataJSON(TypedDict):
    """
    Contains metadata information for a response, including result set details.
    """
    resultset: ResultSetJSON
    ...


class RateLimitJSON(TypedDict):
    """
    Represents the JSON response structure for rate limit information.
    """
    status: str
    message: str
    ...


class DatasetIDJSON(TypedDict):
    """
    Endpoint '/datasets/{id}'
    Represents the JSON response structure for a specific dataset identified by its ID.
    """
    mindate: str
    maxdate: str
    name: str
    datacoverage: float | int
    id: str
    ...


class DatasetJSON(TypedDict):
    """
    Endpoint '/datasets' (subcomponent)
    Represents a dataset within the '/datasets' endpoint response. (subcomponent)
    """
    uid: str
    mindate: str
    maxdate: str
    name: str
    datacoverage: float | int
    id: str
    ...


class DatasetsJSON(TypedDict):
    """
    Endpoint '/datasets'
    Represents the JSON response structure for the '/datasets' endpoint.
    """
    metadata: MetadataJSON
    results: list[DatasetJSON]
    ...


class DatacategoryIDJSON(TypedDict):
    """
    Endpoint '/datacategories/{id}'
    Represents the JSON response structure for a specific data category identified by its ID.
    """
    name: str
    id: str
    ...


class DatacategoriesJSON(TypedDict):
    """
    Endpoint '/datacategories'
    Represents the JSON response structure for the '/datacategories' endpoint.
    """
    metadata: MetadataJSON
    results: list[DatacategoryIDJSON]
    ...


class DatatypeIDJSON(TypedDict):
    """
    Endpoint '/datatypes/{id}'
    Represents the JSON response structure for a specific data type identified by its ID.
    """
    mindate: str
    maxdate: str
    datacoverage: float | int
    id: str
    ...


class DatatypeJSON(TypedDict):
    """
    Endpoint '/datatypes'
    Represents a data type within the '/datatypes' endpoint response. (subcomponent)
    """
    mindate: str
    maxdate: str
    name: str
    datacoverage: float | int
    id: str
    ...


class DatatypesJSON(TypedDict):
    """
    Endpoint '/datatypes'
    Represents the JSON response structure for the '/datatypes' endpoint.
    """
    metadata: MetadataJSON
    results: list[DatatypeJSON]
    ...


class LocationcategoryIDJSON(TypedDict):
    """
    Endpoint '/locationcategories/{id}'
    Represents the JSON response structure for a specific location category identified by its ID.
    """
    name: str
    id: str
    ...


class LocationcategoriesJSON(TypedDict):
    """
    Endpoint '/locationcategories'
    Represents the JSON response structure for the '/locationcategories' endpoint.
    """
    metadata: MetadataJSON
    results: list[LocationcategoryIDJSON]
    ...


class LocationIDJSON(TypedDict):
    """
    Endpoint '/locations/{id}'
    Represents the JSON response structure for a specific location identified by its ID.
    """
    mindate: str
    maxdate: str
    name: str
    datacoverage: float | int
    id: str
    ...


class LocationsJSON(TypedDict):
    """
    Endpoint '/locations'
    Represents the JSON response structure for the '/locations' endpoint.
    """
    metadata: MetadataJSON
    results: list[LocationIDJSON]
    ...


class StationIDJSON(TypedDict):
    """
    Endpoint '/stations/{id}'
    Represents the JSON response structure for a specific station identified by its ID from the '/stations/{id}' endpoint.
    """
    elevation: int | float
    mindate: str
    maxdate: str
    latitude: float | int
    name: str
    datacoverage: float | int
    id: str
    elevationUnit: str
    longitude: float | int
    ...


class StationsJSON(TypedDict):
    """
    Endpoint '/stations'
    Represents the JSON response structure for the '/stations' endpoint.
    """
    metadata: MetadataJSON
    results: list[StationIDJSON]
    ...


class DatapointJSON(TypedDict):
    """
    Endpoint '/data?datasetid=YOUR_DATASETID' (subcomponent)
    Represents a single data point in the response from the 'data?datasetid=YOUR_DATASETID' endpoint. (subcomponent)
    """
    date: str
    datatype: str
    station: str
    attributes: NotRequired[str]
    value: float | int
    ...


class DataJSON(TypedDict):
    """
    Endpoint '/data?datasetid=YOUR_DATASETID'
    Represents the full JSON response structure for the '/data?datasetid=YOUR_DATASETID' endpoint.
    """
    metadata: MetadataJSON
    results: list[DatapointJSON]
    ...


