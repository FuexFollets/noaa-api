"""
This type stub file was generated by pyright.
"""

from typing import Literal, Required, TypedDict

"""
NOAA API Query Parameter Schemas
================================

This module defines `TypedDict` structures representing valid query parameters for various NOAA NCEI API v2 endpoints. These schemas provide type safety and enforce expected query structures.

Each class corresponds to a specific API endpoint, detailing the expected parameters and their types.

Integration with aiohttp:
----------------------
These parameter schemas are specifically designed to be used with aiohttp's ClientSession.get method's
`params` keyword argument. For example:

```python
async with aiohttp.ClientSession() as session:
    params: parameter_schemas.DatasetsParameters = {
        "datatypeid": "TMAX",
        "startdate": "2020-01-01",
        "limit": 100
    }
    async with session.get("https://api.example.com/datasets", params=params) as response:
        data = await response.json()
```

The schemas ensure that the parameters match aiohttp's expectations for query string generation
(see: https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession.get).
Key features:
- Type safety for parameter values
- Automatic conversion of parameters to proper URL encoding
- Support for multi-value parameters using & separation
- Validation of enum values (e.g., sortorder, units)

Schemas:
--------
 - `DatasetsParameters`: Parameters for querying `/datasets`.
 - `DatacategoriesParameters`: Parameters for querying `/datacategories`.
 - `DatatypesParameters`: Parameters for querying `/datatypes`.
 - `LocationcategoriesParameters`: Parameters for querying `/locationcategories`.
 - `LocationsParameters`: Parameters for querying `/locations`.
 - `StationsParameters`: Parameters for querying `/stations`.
 - `DataParameters`: Parameters for querying `/data`.

Notes:
------
 - Many parameters support filtering via singular values or chains separated by `&` (e.g., `"GHCND:USW00094728&GHCND:USC00042319"`).
 - Dates must be formatted as `"YYYY-MM-DD"` or `"YYYY-MM-DDThh:mm:ss"`.
 - `sortfield` and `sortorder` control result sorting.
 - `limit` and `offset` allow pagination (default `limit=25`, max `limit=1000`).
 - `units` determines unit conversion (`"standard"` or `"metric"`).
 - `includemetadata` is a boolean flag to include or exclude metadata from responses.
 - `extent` (in `StationsParameters`) defines a bounding box for geographic filtering. (format: "latitude_min,longitude_min,latitude_max,longitude_max")

Advanced Usage:
-------------
1. Multi-value Parameters:
   ```python
   params: parameter_schemas.StationsParameters = {
       "stationid": "GHCND:USW00094728&GHCND:USC00042319",
       # OR as a joined list
       "stationid": "&".join(["GHCND:USW00094728", "GHCND:USC00042319"])
   }
   ```

2. Geographic Filtering:
   ```python
   params: parameter_schemas.StationsParameters = {
       "extent": "40.0,-90.0,42.0,-88.0",  # latitude_min,longitude_min,latitude_max,longitude_max
       "datasetid": "GHCND"
   }
   ```

3. Required Parameters:
   ```python
   params: parameter_schemas.DataParameters = {
       "datasetid": "GHCND",  # Required
       "startdate": "2020-01-01",  # Required
       "enddate": "2020-12-31",  # Required
       "units": "metric"  # Optional
   }
   ```

These schemas facilitate type checking and autocompletion in IDEs while working with the NOAA API.
"""
Sortfield = Literal["id", "name", "mindate", "maxdate", "datacoverage", ""]
DataSortField = Literal["datatype", "date", "station"]
Sortorder = Literal["asc", "desc"]
Units = Literal["standard", "metric", ""]
class DatasetsParameters(TypedDict, total=False):
    """
    Parameters for querying the `/datasets` endpoint of the NOAA NCEI API v2.
    """
    datatypeid: str
    locationid: str
    stationid: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class DatacategoriesParameters(TypedDict, total=False):
    """
    Parameters for querying the `/datacategories` endpoint of the NOAA NCEI API v2.
    """
    datasetid: str
    locationid: str
    stationid: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class DatatypesParameters(TypedDict, total=False):
    """
    Parameters for querying the `/datatypes` endpoint of the NOAA NCEI API v2.
    """
    datasetid: str
    locationid: str
    stationid: str
    datacategoryid: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class LocationcategoriesParameters(TypedDict, total=False):
    """
    Parameters for querying the `/locationcategories` endpoint of the NOAA NCEI API v2.
    """
    datasetid: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class LocationsParameters(TypedDict, total=False):
    """
    Parameters for querying the `/locations` endpoint of the NOAA NCEI API v2.
    """
    datasetid: str
    locationcategoryid: str
    datacategoryid: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class StationsParameters(TypedDict, total=False):
    """
    Parameters for querying the `/stations` endpoint of the NOAA NCEI API v2.
    """
    datasetid: str
    locationid: str
    datacategoryid: str
    datatypeid: str
    extent: str
    startdate: str
    enddate: str
    sortfield: Sortfield
    sortorder: Sortorder
    limit: int
    offset: int
    ...


class DataParameters(TypedDict, total=False):
    """
    Parameters for querying the `/data` endpoint of the NOAA NCEI API v2.
    """
    datasetid: Required[str]
    datatypeid: str
    locationid: str
    stationid: str
    startdate: Required[str]
    enddate: Required[str]
    units: Units
    sortfield: DataSortField
    sortorder: Sortorder
    limit: int
    offset: int
    includemetadata: str
    ...


AnyParameter = (DatasetsParameters | DatacategoriesParameters | DatatypesParameters | LocationcategoriesParameters | LocationsParameters | StationsParameters | DataParameters)
